exports[`Check interface correctly implemented dont report wrong implementation error when implemented type is not found 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 30,
        "line": 3,
        "path": "schema.gql",
      },
    ],
    "message": "Type \"Nodes\" not found.",
    "severity": "error",
  },
]
`;

exports[`Check interface correctly implemented report error when additional arguments are required 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 32,
        "line": 7,
        "path": "schema.gql",
      },
    ],
    "message": "Test.list(second:) is of required type \"Int!\" but is not also provided by the interface Node.list.",
    "severity": "error",
  },
]
`;

exports[`Check interface correctly implemented report error when field args missing 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 11,
        "line": 7,
        "path": "schema.gql",
      },
    ],
    "message": "Node.list expects argument \"after\" but Test.list does not provide it.",
    "severity": "error",
  },
]
`;

exports[`Check interface correctly implemented report error when field args type mismatch 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 23,
        "line": 7,
        "path": "schema.gql",
      },
    ],
    "message": "Node.list(first:) expects type \"String!\" but Test.list(first:) provides type \"Int!\".",
    "severity": "error",
  },
]
`;

exports[`Check interface correctly implemented report error when field type mismatch 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 15,
        "line": 7,
        "path": "schema.gql",
      },
    ],
    "message": "Node.id expects type \"ID!\" but Test.id provides type \"ID\".",
    "severity": "error",
  },
]
`;

exports[`Check interface correctly implemented report error when fields missing 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 9,
        "line": 6,
        "path": "schema.gql",
      },
    ],
    "message": "Missing interface fields [id]",
    "severity": "error",
  },
]
`;

exports[`Global Schema errors should report error when \`Query\` type is missing 1`] = `
Array [
  Object {
    "locations": undefined,
    "message": "Must provide schema definition with query type or a type named Query.",
    "severity": "error",
  },
]
`;

exports[`Multiple definition for same type should report for different type (Object and Scalar) 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 14,
        "line": 3,
        "path": "schema.gql",
      },
      Object {
        "column": 16,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Schema must contain unique named types but contains multiple types named \"Test\".",
    "severity": "error",
  },
]
`;

exports[`Multiple definition for same type should report for different type (ObjectType and InputType) 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 14,
        "line": 3,
        "path": "schema.gql",
      },
      Object {
        "column": 15,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Schema must contain unique named types but contains multiple types named \"Test\".",
    "severity": "error",
  },
]
`;

exports[`Multiple definition for same type should report for input type (Input and Scalar) 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 16,
        "line": 3,
        "path": "schema.gql",
      },
      Object {
        "column": 15,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Schema must contain unique named types but contains multiple types named \"Test\".",
    "severity": "error",
  },
]
`;

exports[`Multiple definition for same type should report for same type (ObjectType) 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 14,
        "line": 3,
        "path": "schema.gql",
      },
      Object {
        "column": 14,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Schema must contain unique named types but contains multiple types named \"Test\".",
    "severity": "error",
  },
]
`;

exports[`Multiple definition for same type should report if same named types in different files 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 15,
        "line": 3,
        "path": "file1.gql",
      },
      Object {
        "column": 16,
        "line": 2,
        "path": "file2.gql",
      },
    ],
    "message": "Schema must contain unique named types but contains multiple types named \"Test\".",
    "severity": "error",
  },
]
`;

exports[`Unknown Type Name detect in args 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 23,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Type \"xString\" not found.",
    "severity": "error",
  },
]
`;

exports[`Unknown Type Name detect in fieldDef of input type 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 17,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Type \"XTest\" not found.",
    "severity": "error",
  },
]
`;

exports[`Unknown Type Name detect in fieldDef of interface type 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 17,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Type \"XTest\" not found.",
    "severity": "error",
  },
]
`;

exports[`Unknown Type Name detect in fieldDef of output type 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 17,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Type \"XTest\" not found.",
    "severity": "error",
  },
]
`;

exports[`Unknown Type Name detect when type is inside list 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 18,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Type \"XTest\" not found.",
    "severity": "error",
  },
]
`;

exports[`Unknown Type Name detect when type is non-nullable 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 17,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Type \"XTest\" not found.",
    "severity": "error",
  },
]
`;

exports[`Unknown Type Name detect when type is used in union type 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 22,
        "line": 3,
        "path": "schema.gql",
      },
    ],
    "message": "Type \"xTest\" not found.",
    "severity": "error",
  },
]
`;

exports[`Wrong type report error if ObjectType field args is of InterfaceType 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 22,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Expected Input type.",
    "severity": "error",
  },
]
`;

exports[`Wrong type report error if ObjectType field args is of ObjectType 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 22,
        "line": 4,
        "path": "schema.gql",
      },
    ],
    "message": "Expected Input type.",
    "severity": "error",
  },
]
`;

exports[`Wrong type report error if ObjectType field args is of UnionType 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 22,
        "line": 5,
        "path": "schema.gql",
      },
    ],
    "message": "Expected Input type.",
    "severity": "error",
  },
]
`;

exports[`Wrong type report error if ObjectType field is of InputObject type 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 28,
        "line": 3,
        "path": "schema.gql",
      },
    ],
    "message": "Expected Output type.",
    "severity": "error",
  },
]
`;

exports[`test should not include file name and location in Syntax error 1`] = `
Array [
  Object {
    "locations": Array [
      Object {
        "column": 18,
        "line": 2,
        "path": "schema.gql",
      },
    ],
    "message": "Syntax Error: Expected {, found Name \"implements\"",
    "severity": "error",
  },
]
`;
